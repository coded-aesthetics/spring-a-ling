{"contents":"exports.__esModule = true;\nvar particle_1 = __fusereq(4);\nvar p5_1 = __fusereq(5);\nvar p5_1d = __fuse.dt(p5_1);\nvar spring_ring_1 = __fusereq(6);\nvar sketch = function (p) {\n  let then = Date.now();\n  let springRing;\n  let particle;\n  const fr = 60.0;\n  const surface_friction = 5;\n  function calculate_centroid(vectors) {\n    const sumVector = vectors.reduce((acc, cur) => p5_1d.default.Vector.add(acc, cur), p.createVector(0, 0));\n    return sumVector.mult(1 / vectors.length);\n  }\n  function drawSpringRing(springRing) {\n    springRing.springs.forEach((spring, index) => drawParticle(spring.particle_center, (index + 1) * 3));\n    for (let i = 0; i < springRing.springs.length - 1; i++) {\n      drawLine(springRing.springs[i].particle_center, springRing.springs[i + 1].particle_center);\n    }\n    drawLine(springRing.springs[springRing.springs.length - 1].particle_center, springRing.springs[0].particle_center);\n  }\n  function drawParticle(particle, size = 10, color = 255) {\n    p.fill(color);\n    p.ellipse(particle.pos.x, particle.pos.y, size, size);\n  }\n  function drawParticleFunk(particle) {\n    const radius = particle.velocity.mag() / 50;\n    p.fill(Math.abs(Math.round(particle.velocity.x / 10)), Math.abs(Math.round(particle.velocity.y / 10)), radius * 5);\n    p.ellipse(particle.pos.x, particle.pos.y, radius, radius);\n  }\n  function drawParticleFunk2(particle) {\n    p.stroke(0, 0, 0, 1.0);\n    const radius = particle.velocity.mag() / 10;\n    p.fill(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));\n    p.ellipse(particle.pos.x, particle.pos.y, radius, radius);\n  }\n  function drawSpring(spring) {\n    drawParticle(spring.particle_center);\n  }\n  function drawLine(part1, part2) {\n    p.stroke(255);\n    p.line(part1.pos.x, part1.pos.y, part2.pos.x, part2.pos.y);\n  }\n  let particles = [];\n  p.preload = () => {};\n  p.setup = function () {\n    p.createCanvas(window.innerWidth, window.innerHeight);\n    p.frameRate(fr);\n    springRing = new spring_ring_1.SpringRing(50);\n    particle = new particle_1.Particle(Math.random() * window.innerWidth, Math.random() * window.innerHeight, p.createVector(Math.random() * window.innerWidth - window.innerWidth / 2, Math.random() * 1000 - 500));\n  };\n  p.windowResized = function () {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  };\n  p.draw = function () {\n    const deltaTime = Date.now() - then;\n    p.background(0);\n    const time_slice = deltaTime / 1000;\n    springRing.update(time_slice, 1 / surface_friction);\n    drawSpringRing(springRing);\n    particles.forEach(part => part.update(time_slice, 1 / surface_friction));\n    particles.forEach(drawParticleFunk);\n    then = Date.now();\n  };\n};\nnew p5_1d.default(sketch);\n","sourceMap":"{\"version\":3,\"sources\":[\"src/sketch.ts\"],\"names\":[\"sketch\",\"p\",\"then\",\"Date\",\"now\",\"springRing\",\"particle\",\"fr\",\"surface_friction\",\"vectors\",\"sumVector\",\"reduce\",\"acc\",\"cur\",\"p5_1d\",\"Vector\",\"add\",\"createVector\",\"mult\",\"length\",\"springs\",\"forEach\",\"spring\",\"index\",\"drawParticle\",\"particle_center\",\"i\",\"drawLine\",\"size\",\"color\",\"fill\",\"ellipse\",\"pos\",\"x\",\"y\",\"radius\",\"velocity\",\"mag\",\"Math\",\"abs\",\"round\",\"stroke\",\"random\",\"part1\",\"part2\",\"line\",\"particles\",\"preload\",\"setup\",\"createCanvas\",\"window\",\"innerWidth\",\"innerHeight\",\"frameRate\",\"spring_ring_1\",\"particle_1\",\"windowResized\",\"resizeCanvas\",\"windowWidth\",\"windowHeight\",\"draw\",\"deltaTime\",\"background\",\"time_slice\",\"update\",\"drawSpringRing\",\"part\",\"drawParticleFunk\"],\"mappings\":\";;;;;IAKIA,SAAS,UAAUC;MAGjBC,OAAOC,KAAKC;MAEZC;MACAC;QAEEC,KAAK;QACLC,mBAAmB;EAE3B,4BAA4BC;UACpBC,YAAYD,QAAQE,OAAO,CAACC,KAAKC,QAAQC,cAAGC,OAAOC,IAAIJ,KAAKC,MAAMZ,EAAEgB,aAAa,GAAG;WACnFP,UAAUQ,KAAK,IAAIT,QAAQU;;EAGpC,wBAAwBd;IACtBA,WAAWe,QAAQC,QAAQ,CAACC,QAAQC,UAAUC,aAAaF,OAAOG,kBAAkBF,QAAQ,KAAK;aACxFG,IAAI,GAAGA,IAAIrB,WAAWe,QAAQD,SAAS,GAAGO;MACjDC,SAAStB,WAAWe,QAAQM,GAAGD,iBAAiBpB,WAAWe,QAAQM,IAAI,GAAGD;;IAE5EE,SAAStB,WAAWe,QAAQf,WAAWe,QAAQD,SAAS,GAAGM,iBAAiBpB,WAAWe,QAAQ,GAAGK;;EAGlG,sBAAsBnB,UAAUsB,OAAO,IAAIC,QAAQ;IACjD5B,EAAE6B,KAAKD;IACP5B,EAAE8B,QAAQzB,SAAS0B,IAAIC,GAAG3B,SAAS0B,IAAIE,GAAGN,MAAMA;;EAGpD,0BAA0BtB;UAClB6B,SAAS7B,SAAS8B,SAASC,QAAQ;IACzCpC,EAAE6B,KAAKQ,KAAKC,IAAID,KAAKE,MAAMlC,SAAS8B,SAASH,IAAE,MAAOK,KAAKC,IAAID,KAAKE,MAAMlC,SAAS8B,SAASF,IAAE,MAAOC,SAAO;IAC5GlC,EAAE8B,QAAQzB,SAAS0B,IAAIC,GAAG3B,SAAS0B,IAAIE,GAAGC,QAAQA;;EAGpD,2BAA2B7B;IACzBL,EAAEwC,OAAO,GAAG,GAAG,GAAG;UACZN,SAAS7B,SAAS8B,SAASC,QAAQ;IAEzCpC,EAAE6B,KAAKQ,KAAKE,MAAMF,KAAKI,WAAW,MAAMJ,KAAKE,MAAMF,KAAKI,WAAW,MAAMJ,KAAKE,MAAMF,KAAKI,WAAW;IACpGzC,EAAE8B,QAAQzB,SAAS0B,IAAIC,GAAG3B,SAAS0B,IAAIE,GAAGC,QAAQA;;EAGpD,oBAAoBb;IAClBE,aAAaF,OAAOG;;EAGtB,kBAAkBkB,OAAOC;IACvB3C,EAAEwC,OAAO;IACTxC,EAAE4C,KAAKF,MAAMX,IAAIC,GAAGU,MAAMX,IAAIE,GAAGU,MAAMZ,IAAIC,GAAGW,MAAMZ,IAAIE;;MAGtDY;EAEF7C,EAAE8C,UAAU;EAKZ9C,EAAE+C,QAAQ;IACR/C,EAAEgD,aAAaC,OAAOC,YAAYD,OAAOE;IACzCnD,EAAEoD,UAAU9C;IAEZF,iBAAiBiD,yBAAW;IAE5BhD,eAAeiD,oBAASjB,KAAKI,WAAUQ,OAAOC,YAAYb,KAAKI,WAAUQ,OAAOE,aAAanD,EAAEgB,aAAaqB,KAAKI,WAAUQ,OAAOC,aAAaD,OAAOC,aAAW,GAAGb,KAAKI,WAAU,OAAM;;EAG3LzC,EAAEuD,gBAAgB;IAChBvD,EAAEwD,aAAaxD,EAAEyD,aAAazD,EAAE0D;;EAGlC1D,EAAE2D,OAAO;UACDC,YAAa1D,KAAKC,QAAQF;IAChCD,EAAE6D,WAAW;UAEPC,aAAaF,YAAY;IAE/BxD,WAAW2D,OAAOD,YAAY,IAAIvD;IAElCyD,eAAe5D;IAEfyC,UAAUzB,QAAQ,AAAA6C,QAAQA,KAAKF,OAAOD,YAAY,IAAIvD;IACtDsC,UAAUzB,QAAQ8C;IAElBjE,OAAOC,KAAKC;;;IAIZU,cAAGd\",\"sourcesContent\":[\"/// <reference path=\\\"../global.d.ts\\\" />\\nimport {Particle} from './particle';\\nimport p5 from 'p5';\\nimport { SpringRing } from './spring-ring';\\n\\nvar sketch = function (p: p5) {\\n  // let ding: p5.SoundFile\\n\\n  let then = Date.now();\\n\\n  let springRing;\\n  let particle;\\n\\n  const fr = 60.0;\\n  const surface_friction = 5;\\n\\nfunction calculate_centroid(vectors) {\\n  const sumVector = vectors.reduce((acc, cur) => p5.Vector.add(acc, cur), p.createVector(0, 0))\\n  return sumVector.mult(1 / vectors.length);\\n}\\n\\nfunction drawSpringRing(springRing) {\\n  springRing.springs.forEach((spring, index) => drawParticle(spring.particle_center, (index + 1) * 3));\\n  for (let i = 0; i < springRing.springs.length - 1; i++) {\\n    drawLine(springRing.springs[i].particle_center, springRing.springs[i + 1].particle_center)\\n  }\\n  drawLine(springRing.springs[springRing.springs.length - 1].particle_center, springRing.springs[0].particle_center);\\n}\\n\\n  function drawParticle(particle, size = 10, color = 255) {\\n    p.fill(color);\\n    p.ellipse(particle.pos.x, particle.pos.y, size, size)\\n  }\\n\\nfunction drawParticleFunk(particle) {\\n  const radius = particle.velocity.mag() / 50;\\n  p.fill(Math.abs(Math.round(particle.velocity.x/10,)), Math.abs(Math.round(particle.velocity.y/10,)) ,radius*5);\\n  p.ellipse(particle.pos.x, particle.pos.y, radius, radius)\\n}\\n\\nfunction drawParticleFunk2(particle) {\\n  p.stroke(0, 0, 0, 1.0);\\n  const radius = particle.velocity.mag() / 10;\\n  // Math.random() > 0.5 ? fill(radius * 5, 0 ,radius * 5) : fill(0, radius * 5 ,0);\\n  p.fill(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));\\n  p.ellipse(particle.pos.x, particle.pos.y, radius, radius)\\n}\\n\\nfunction drawSpring(spring) {\\n  drawParticle(spring.particle_center);\\n}\\n\\nfunction drawLine(part1, part2) {\\n  p.stroke(255);\\n  p.line(part1.pos.x, part1.pos.y, part2.pos.x, part2.pos.y);\\n}\\n\\nlet particles = [];\\n\\n  p.preload = () => {\\n    // const DING_FILE = require(\\\"./ding.mp3\\\").default\\n    // ding = new p5.SoundFile(DING_FILE)\\n  }\\n\\n  p.setup = function () {\\n    p.createCanvas(window.innerWidth, window.innerHeight);\\n    p.frameRate(fr);\\n\\n    springRing = new SpringRing(50);\\n\\n    particle = new Particle(Math.random()* window.innerWidth, Math.random()* window.innerHeight, p.createVector(Math.random()* window.innerWidth - window.innerWidth/2, Math.random()* 1000 -500));\\n  }\\n\\n  p.windowResized = function() {\\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\\n  }\\n\\n  p.draw = function () {\\n    const deltaTime = (Date.now() - then);\\n    p.background(0);\\n\\n    const time_slice = deltaTime / 1000;\\n\\n    springRing.update(time_slice, 1 / surface_friction)\\n\\n    drawSpringRing(springRing);\\n\\n    particles.forEach(part => part.update(time_slice, 1 / surface_friction))\\n    particles.forEach(drawParticleFunk)\\n\\n    then = Date.now();\\n  }\\n}\\n\\nnew p5(sketch)\\n\"]}"}