{"version":3,"sources":["src/particle.ts","src/spring-ring.ts","src/sketch.ts","src/particle-utils.ts","src/spring.ts"],"names":["x_","y_","velocity_","p5_1d","Vector","set","velocity","pos","nudge","dx","dy","Particle","act","add","update","time_slice","surface_smoothness","mult","emit_particles","amount","particles","i","push","x","y","Math","random","springs","particle_utils_1","window","innerWidth","innerHeight","sorted_particles","length","spring_1","forEach","spring","sketch","p","then","Date","now","springRing","particle","fr","surface_friction","vectors","sumVector","reduce","acc","cur","createVector","index","drawParticle","particle_center","drawLine","size","color","fill","ellipse","radius","mag","abs","round","stroke","part1","part2","line","preload","setup","createCanvas","frameRate","spring_ring_1","particle_1","windowResized","resizeCanvas","windowWidth","windowHeight","draw","deltaTime","background","drawSpringRing","part","drawParticleFunk","p2","distVec","sub","magSq","dist","minX","maxX","minY","maxY","restArray","slice","sort","a","b","particle_dist","concat","particle_center_","connected_particle_","tension_","connected_particle","tension","direction","normalize"],"mappings":"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","file":"","sourcesContent":["import p5 from 'p5';\n\nexport function Particle(x_, y_, velocity_ = new p5.Vector().set(0,0)) {\n  this.velocity = velocity_;\n  this.pos = new p5.Vector().set(x_ , y_);\n\n  this.nudge = function (dx, dy) {\n    return new Particle(x_ + dx, y_ + dy, velocity_);\n  }\n\n  this.act = function (velocity) {\n    this.velocity.add(velocity);\n  }\n\n  this.update = function (time_slice, surface_smoothness) {\n    this.velocity.mult(1- ((1 - surface_smoothness) * time_slice));\n    this.pos.add(p5.Vector.mult(this.velocity, time_slice));\n  }\n\n  this.emit_particles = function(amount) {\n    const particles = [];\n    for (let i = 0; i < amount; i++) {\n      particles.push(\n        new Particle(this.pos.x, this.pos.y,\n          p5.Vector.add(this.velocity, new p5.Vector().set(\n            Math.random() * 1000 - 500,\n            Math.random() * 1000 - 500)\n          ))\n        );\n    }\n    return particles;\n  }\n}","import { create_random_particles, sort_particles_by_vicinity } from './particle-utils';\nimport { Spring } from './spring';\n\nexport function SpringRing(amount) {\n    // const centerSpring = new Spring(new Particle(Math.random()* window.innerWidth, Math.random()* window.innerHeight), Math.random() * 0.0025);\n    this.springs = [];\n    let particles = create_random_particles(amount, 0, window.innerWidth, 0, window.innerHeight);\n    let sorted_particles = sort_particles_by_vicinity(particles);\n    for (let i = 0; i < sorted_particles.length - 1; i++) {\n      this.springs.push(new Spring(sorted_particles[i], sorted_particles[i + 1], Math.random() * 0.0025));\n    }\n    this.springs.push(new Spring(sorted_particles[sorted_particles.length - 1], sorted_particles[0], Math.random() * 0.0025));\n\n    this.update = function(time_slice, surface_smoothness) {\n      this.springs.forEach(spring =>\n        spring.update(time_slice, surface_smoothness)\n      );\n    }\n  }","/// <reference path=\"../global.d.ts\" />\nimport {Particle} from './particle';\nimport p5 from 'p5';\nimport { SpringRing } from './spring-ring';\n\nvar sketch = function (p: p5) {\n  // let ding: p5.SoundFile\n\n  let then = Date.now();\n\n  let springRing;\n  let particle;\n\n  const fr = 60.0;\n  const surface_friction = 5;\n\nfunction calculate_centroid(vectors) {\n  const sumVector = vectors.reduce((acc, cur) => p5.Vector.add(acc, cur), p.createVector(0, 0))\n  return sumVector.mult(1 / vectors.length);\n}\n\nfunction drawSpringRing(springRing) {\n  springRing.springs.forEach((spring, index) => drawParticle(spring.particle_center, (index + 1) * 3));\n  for (let i = 0; i < springRing.springs.length - 1; i++) {\n    drawLine(springRing.springs[i].particle_center, springRing.springs[i + 1].particle_center)\n  }\n  drawLine(springRing.springs[springRing.springs.length - 1].particle_center, springRing.springs[0].particle_center);\n}\n\n  function drawParticle(particle, size = 10, color = 255) {\n    p.fill(color);\n    p.ellipse(particle.pos.x, particle.pos.y, size, size)\n  }\n\nfunction drawParticleFunk(particle) {\n  const radius = particle.velocity.mag() / 50;\n  p.fill(Math.abs(Math.round(particle.velocity.x/10,)), Math.abs(Math.round(particle.velocity.y/10,)) ,radius*5);\n  p.ellipse(particle.pos.x, particle.pos.y, radius, radius)\n}\n\nfunction drawParticleFunk2(particle) {\n  p.stroke(0, 0, 0, 1.0);\n  const radius = particle.velocity.mag() / 10;\n  // Math.random() > 0.5 ? fill(radius * 5, 0 ,radius * 5) : fill(0, radius * 5 ,0);\n  p.fill(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));\n  p.ellipse(particle.pos.x, particle.pos.y, radius, radius)\n}\n\nfunction drawSpring(spring) {\n  drawParticle(spring.particle_center);\n}\n\nfunction drawLine(part1, part2) {\n  p.stroke(255);\n  p.line(part1.pos.x, part1.pos.y, part2.pos.x, part2.pos.y);\n}\n\nlet particles = [];\n\n  p.preload = () => {\n    // const DING_FILE = require(\"./ding.mp3\").default\n    // ding = new p5.SoundFile(DING_FILE)\n  }\n\n  p.setup = function () {\n    p.createCanvas(window.innerWidth, window.innerHeight);\n    p.frameRate(fr);\n\n    springRing = new SpringRing(50);\n\n    particle = new Particle(Math.random()* window.innerWidth, Math.random()* window.innerHeight, p.createVector(Math.random()* window.innerWidth - window.innerWidth/2, Math.random()* 1000 -500));\n  }\n\n  p.windowResized = function() {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  }\n\n  p.draw = function () {\n    const deltaTime = (Date.now() - then);\n    p.background(0);\n\n    const time_slice = deltaTime / 1000;\n\n    springRing.update(time_slice, 1 / surface_friction)\n\n    drawSpringRing(springRing);\n\n    particles.forEach(part => part.update(time_slice, 1 / surface_friction))\n    particles.forEach(drawParticleFunk)\n\n    then = Date.now();\n  }\n}\n\nnew p5(sketch)\n","import p5 from 'p5';\nimport { Particle } from './particle';\n\nexport function particle_dist_2 (p, p2) {\n    const distVec = p5.Vector.sub(p.pos, p2.pos);\n    return distVec.magSq();\n  }\n\n  export function particle_dist (p, p2) {\n    return p.pos.dist(p2.pos);\n  }\n\nexport function create_random_particles(amount, minX, maxX, minY, maxY) {\n    let particles = [];\n    for (let i = 0; i < amount; i++) {\n      particles.push(new Particle((Math.random()* (maxX - minX)) - minX, (Math.random()* (maxY - minY)) - minY));\n    }\n    return particles;\n  }\n\nexport function sort_particles_by_vicinity(particles) {\n    let sorted_particles = [];\n    sorted_particles.push(particles[0]);\n    for (let i = 0; i < particles.length - 1; i++) {\n      const restArray = particles.slice( i + 1 );\n      restArray.sort((a, b) => particle_dist(a, particles[i]) - particle_dist(b, particles[i]))\n      sorted_particles.push(restArray[0]);\n      particles = sorted_particles.concat(restArray.slice(1));\n    }\n    return sorted_particles;\n  }","import p5 from 'p5';\nimport { particle_dist_2 } from './particle-utils';\n\nexport function Spring(particle_center_, connected_particle_, tension_) {\n    this.particle_center = particle_center_;\n    this.connected_particle = connected_particle_;\n    this.tension = tension_;\n    this.update = function(time_slice, surface_smoothness) {\n      const dist = particle_dist_2(this.particle_center, this.connected_particle);\n      const direction = p5.Vector.sub(this.particle_center.pos, this.connected_particle.pos).normalize();\n      this.connected_particle.act(direction.mult(this.tension * time_slice * dist));\n      this.connected_particle.update(time_slice, surface_smoothness);\n      this.particle_center.update(time_slice, surface_smoothness);\n    }\n  }\n"]}